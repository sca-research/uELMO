
MaskedAES_R1.elf:     file format elf32-littlearm


Disassembly of section .text:

08000000 <vector_table>:
 8000000:	00 20 00 20 c5 00 00 08 c3 00 00 08 c1 00 00 08     . . ............
	...
 800002c:	c3 00 00 08 00 00 00 00 00 00 00 00 c3 00 00 08     ................
 800003c:	c3 00 00 08 c1 00 00 08 c1 00 00 08 c1 00 00 08     ................
 800004c:	c1 00 00 08 c1 00 00 08 c1 00 00 08 c1 00 00 08     ................
 800005c:	c1 00 00 08 c1 00 00 08 c1 00 00 08 c1 00 00 08     ................
 800006c:	c1 00 00 08 c1 00 00 08 c1 00 00 08 c1 00 00 08     ................
 800007c:	c1 00 00 08 c1 00 00 08 c1 00 00 08 c1 00 00 08     ................
 800008c:	c1 00 00 08 c1 00 00 08 c1 00 00 08 c1 00 00 08     ................
 800009c:	c1 00 00 08 c1 00 00 08 c1 00 00 08 c1 00 00 08     ................
 80000ac:	c1 00 00 08 c1 00 00 08 c1 00 00 08 c1 00 00 08     ................
 80000bc:	c1 00 00 08                                         ....

080000c0 <blocking_handler>:
 80000c0:	e7fe      	b.n	80000c0 <blocking_handler>

080000c2 <null_handler>:
 80000c2:	4770      	bx	lr

080000c4 <reset_handler>:
 80000c4:	2200      	movs	r2, #0
 80000c6:	4814      	ldr	r0, [pc, #80]	; (8000118 <reset_handler+0x54>)
 80000c8:	4b14      	ldr	r3, [pc, #80]	; (800011c <reset_handler+0x58>)
 80000ca:	4915      	ldr	r1, [pc, #84]	; (8000120 <reset_handler+0x5c>)
 80000cc:	1814      	adds	r4, r2, r0
 80000ce:	18d0      	adds	r0, r2, r3
 80000d0:	4288      	cmp	r0, r1
 80000d2:	d203      	bcs.n	80000dc <reset_handler+0x18>
 80000d4:	6824      	ldr	r4, [r4, #0]
 80000d6:	3204      	adds	r2, #4
 80000d8:	6004      	str	r4, [r0, #0]
 80000da:	e7f4      	b.n	80000c6 <reset_handler+0x2>
 80000dc:	4a11      	ldr	r2, [pc, #68]	; (8000124 <reset_handler+0x60>)
 80000de:	4290      	cmp	r0, r2
 80000e0:	d202      	bcs.n	80000e8 <reset_handler+0x24>
 80000e2:	2100      	movs	r1, #0
 80000e4:	c002      	stmia	r0!, {r1}
 80000e6:	e7f9      	b.n	80000dc <reset_handler+0x18>
 80000e8:	4c0f      	ldr	r4, [pc, #60]	; (8000128 <reset_handler+0x64>)
 80000ea:	4810      	ldr	r0, [pc, #64]	; (800012c <reset_handler+0x68>)
 80000ec:	4284      	cmp	r4, r0
 80000ee:	d202      	bcs.n	80000f6 <reset_handler+0x32>
 80000f0:	cc08      	ldmia	r4!, {r3}
 80000f2:	4798      	blx	r3
 80000f4:	e7f9      	b.n	80000ea <reset_handler+0x26>
 80000f6:	4c0e      	ldr	r4, [pc, #56]	; (8000130 <reset_handler+0x6c>)
 80000f8:	4b0e      	ldr	r3, [pc, #56]	; (8000134 <reset_handler+0x70>)
 80000fa:	429c      	cmp	r4, r3
 80000fc:	d202      	bcs.n	8000104 <reset_handler+0x40>
 80000fe:	cc01      	ldmia	r4!, {r0}
 8000100:	4780      	blx	r0
 8000102:	e7f9      	b.n	80000f8 <reset_handler+0x34>
 8000104:	f000 f994 	bl	8000430 <main>
 8000108:	4c0b      	ldr	r4, [pc, #44]	; (8000138 <reset_handler+0x74>)
 800010a:	490c      	ldr	r1, [pc, #48]	; (800013c <reset_handler+0x78>)
 800010c:	428c      	cmp	r4, r1
 800010e:	d202      	bcs.n	8000116 <reset_handler+0x52>
 8000110:	cc04      	ldmia	r4!, {r2}
 8000112:	4790      	blx	r2
 8000114:	e7f9      	b.n	800010a <reset_handler+0x46>
 8000116:	46c0      	nop			; (mov r8, r8)
 8000118:	08000624 	.word	0x08000624
 800011c:	20000000 	.word	0x20000000
 8000120:	20000318 	.word	0x20000318
 8000124:	200003d0 	.word	0x200003d0
 8000128:	08000624 	.word	0x08000624
 800012c:	08000624 	.word	0x08000624
 8000130:	08000624 	.word	0x08000624
 8000134:	08000624 	.word	0x08000624
 8000138:	08000624 	.word	0x08000624
 800013c:	08000624 	.word	0x08000624

08000140 <GenMaskedSbox>:
 8000140:	b500      	push	{lr}
 8000142:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
 8000144:	486a      	ldr	r0, [pc, #424]	; (80002f0 <loop+0x18>)
 8000146:	7801      	ldrb	r1, [r0, #0]
 8000148:	486a      	ldr	r0, [pc, #424]	; (80002f4 <loop+0x1c>)
 800014a:	7802      	ldrb	r2, [r0, #0]
 800014c:	486a      	ldr	r0, [pc, #424]	; (80002f8 <loop+0x20>)
 800014e:	404a      	eors	r2, r1
 8000150:	7002      	strb	r2, [r0, #0]
 8000152:	23ff      	movs	r3, #255	; 0xff
 8000154:	4c69      	ldr	r4, [pc, #420]	; (80002fc <loop+0x24>)
 8000156:	4d6a      	ldr	r5, [pc, #424]	; (8000300 <loop+0x28>)

08000158 <masksbox>:
 8000158:	4610      	mov	r0, r2
 800015a:	4058      	eors	r0, r3
 800015c:	5c26      	ldrb	r6, [r4, r0]
 800015e:	404e      	eors	r6, r1
 8000160:	54ee      	strb	r6, [r5, r3]
 8000162:	3b01      	subs	r3, #1
 8000164:	daf8      	bge.n	8000158 <masksbox>
 8000166:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
 8000168:	bd00      	pop	{pc}

0800016a <MaskingPlaintext>:
 800016a:	b500      	push	{lr}
 800016c:	b4f0      	push	{r4, r5, r6, r7}
 800016e:	4b60      	ldr	r3, [pc, #384]	; (80002f0 <loop+0x18>)
 8000170:	781b      	ldrb	r3, [r3, #0]
 8000172:	250f      	movs	r5, #15

08000174 <arrangedatamasked>:
 8000174:	00ae      	lsls	r6, r5, #2
 8000176:	270c      	movs	r7, #12
 8000178:	403e      	ands	r6, r7
 800017a:	08af      	lsrs	r7, r5, #2
 800017c:	407e      	eors	r6, r7
 800017e:	5d87      	ldrb	r7, [r0, r6]
 8000180:	405f      	eors	r7, r3
 8000182:	2403      	movs	r4, #3
 8000184:	402c      	ands	r4, r5
 8000186:	554f      	strb	r7, [r1, r5]
 8000188:	3d01      	subs	r5, #1
 800018a:	daf3      	bge.n	8000174 <arrangedatamasked>
 800018c:	bcf0      	pop	{r4, r5, r6, r7}
 800018e:	bd00      	pop	{pc}

08000190 <MaskingKey>:
 8000190:	b500      	push	{lr}
 8000192:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
 8000194:	4b57      	ldr	r3, [pc, #348]	; (80002f4 <loop+0x1c>)
 8000196:	781a      	ldrb	r2, [r3, #0]
 8000198:	250f      	movs	r5, #15

0800019a <arrangedatakeymasked>:
 800019a:	00ae      	lsls	r6, r5, #2
 800019c:	270c      	movs	r7, #12
 800019e:	403e      	ands	r6, r7
 80001a0:	08af      	lsrs	r7, r5, #2
 80001a2:	407e      	eors	r6, r7
 80001a4:	5d87      	ldrb	r7, [r0, r6]
 80001a6:	4057      	eors	r7, r2
 80001a8:	554f      	strb	r7, [r1, r5]
 80001aa:	3d01      	subs	r5, #1
 80001ac:	daf5      	bge.n	800019a <arrangedatakeymasked>
 80001ae:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
 80001b0:	bd00      	pop	{pc}

080001b2 <MADK>:
 80001b2:	b500      	push	{lr}
 80001b4:	b4f0      	push	{r4, r5, r6, r7}
 80001b6:	2403      	movs	r4, #3

080001b8 <ADK>:
 80001b8:	00a5      	lsls	r5, r4, #2
 80001ba:	5946      	ldr	r6, [r0, r5]
 80001bc:	594f      	ldr	r7, [r1, r5]
 80001be:	4077      	eors	r7, r6
 80001c0:	5147      	str	r7, [r0, r5]
 80001c2:	3c01      	subs	r4, #1
 80001c4:	daf8      	bge.n	80001b8 <ADK>
 80001c6:	bcf0      	pop	{r4, r5, r6, r7}
 80001c8:	bd00      	pop	{pc}

080001ca <MSbox>:
 80001ca:	b500      	push	{lr}
 80001cc:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
 80001ce:	240f      	movs	r4, #15
 80001d0:	4d4b      	ldr	r5, [pc, #300]	; (8000300 <loop+0x28>)
 80001d2:	494a      	ldr	r1, [pc, #296]	; (80002fc <loop+0x24>)

080001d4 <MS>:
 80001d4:	5d06      	ldrb	r6, [r0, r4]
 80001d6:	5dab      	ldrb	r3, [r5, r6]
 80001d8:	5503      	strb	r3, [r0, r4]
 80001da:	3c01      	subs	r4, #1
 80001dc:	dafa      	bge.n	80001d4 <MS>
 80001de:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
 80001e0:	bd00      	pop	{pc}

080001e2 <MShiftRow>:
 80001e2:	b500      	push	{lr}
 80001e4:	b4f0      	push	{r4, r5, r6, r7}
 80001e6:	2508      	movs	r5, #8
 80001e8:	2610      	movs	r6, #16
 80001ea:	2718      	movs	r7, #24
 80001ec:	6844      	ldr	r4, [r0, #4]
 80001ee:	41ec      	rors	r4, r5
 80001f0:	6044      	str	r4, [r0, #4]
 80001f2:	6884      	ldr	r4, [r0, #8]
 80001f4:	41f4      	rors	r4, r6
 80001f6:	6084      	str	r4, [r0, #8]
 80001f8:	68c4      	ldr	r4, [r0, #12]
 80001fa:	41fc      	rors	r4, r7
 80001fc:	60c4      	str	r4, [r0, #12]
 80001fe:	bcf0      	pop	{r4, r5, r6, r7}
 8000200:	bd00      	pop	{pc}

08000202 <MMixColumn>:
 8000202:	b500      	push	{lr}
 8000204:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
 8000206:	2300      	movs	r3, #0
 8000208:	2400      	movs	r4, #0
 800020a:	2500      	movs	r5, #0
 800020c:	2600      	movs	r6, #0
 800020e:	2700      	movs	r7, #0
 8000210:	4642      	mov	r2, r8
 8000212:	b404      	push	{r2}
 8000214:	464a      	mov	r2, r9
 8000216:	b404      	push	{r2}
 8000218:	4652      	mov	r2, sl
 800021a:	b404      	push	{r2}
 800021c:	4681      	mov	r9, r0
 800021e:	4688      	mov	r8, r1
 8000220:	4f38      	ldr	r7, [pc, #224]	; (8000304 <loop+0x2c>)
 8000222:	4d34      	ldr	r5, [pc, #208]	; (80002f4 <loop+0x1c>)
 8000224:	782b      	ldrb	r3, [r5, #0]
 8000226:	4d38      	ldr	r5, [pc, #224]	; (8000308 <loop+0x30>)
 8000228:	5cee      	ldrb	r6, [r5, r3]
 800022a:	0235      	lsls	r5, r6, #8
 800022c:	406e      	eors	r6, r5
 800022e:	0435      	lsls	r5, r6, #16
 8000230:	406e      	eors	r6, r5
 8000232:	021d      	lsls	r5, r3, #8
 8000234:	406b      	eors	r3, r5
 8000236:	041d      	lsls	r5, r3, #16
 8000238:	406b      	eors	r3, r5
 800023a:	2403      	movs	r4, #3

0800023c <mix_columnmasked>:
 800023c:	46a2      	mov	sl, r4
 800023e:	4620      	mov	r0, r4
 8000240:	464c      	mov	r4, r9
 8000242:	0081      	lsls	r1, r0, #2
 8000244:	5861      	ldr	r1, [r4, r1]
 8000246:	3001      	adds	r0, #1
 8000248:	2403      	movs	r4, #3
 800024a:	4020      	ands	r0, r4
 800024c:	464c      	mov	r4, r9
 800024e:	0085      	lsls	r5, r0, #2
 8000250:	5965      	ldr	r5, [r4, r5]
 8000252:	4059      	eors	r1, r3
 8000254:	4069      	eors	r1, r5
 8000256:	09cc      	lsrs	r4, r1, #7
 8000258:	683a      	ldr	r2, [r7, #0]
 800025a:	4014      	ands	r4, r2
 800025c:	68ba      	ldr	r2, [r7, #8]
 800025e:	4354      	muls	r4, r2
 8000260:	0049      	lsls	r1, r1, #1
 8000262:	687a      	ldr	r2, [r7, #4]
 8000264:	4011      	ands	r1, r2
 8000266:	4061      	eors	r1, r4
 8000268:	4069      	eors	r1, r5
 800026a:	3001      	adds	r0, #1
 800026c:	2403      	movs	r4, #3
 800026e:	4020      	ands	r0, r4
 8000270:	464c      	mov	r4, r9
 8000272:	0085      	lsls	r5, r0, #2
 8000274:	5965      	ldr	r5, [r4, r5]
 8000276:	4069      	eors	r1, r5
 8000278:	3001      	adds	r0, #1
 800027a:	2403      	movs	r4, #3
 800027c:	4020      	ands	r0, r4
 800027e:	464c      	mov	r4, r9
 8000280:	0085      	lsls	r5, r0, #2
 8000282:	5965      	ldr	r5, [r4, r5]
 8000284:	4069      	eors	r1, r5
 8000286:	4071      	eors	r1, r6
 8000288:	4655      	mov	r5, sl
 800028a:	00ad      	lsls	r5, r5, #2
 800028c:	4640      	mov	r0, r8
 800028e:	5141      	str	r1, [r0, r5]
 8000290:	4654      	mov	r4, sl
 8000292:	3c01      	subs	r4, #1
 8000294:	dad2      	bge.n	800023c <mix_columnmasked>
 8000296:	bc04      	pop	{r2}
 8000298:	4692      	mov	sl, r2
 800029a:	bc04      	pop	{r2}
 800029c:	4691      	mov	r9, r2
 800029e:	bc04      	pop	{r2}
 80002a0:	4690      	mov	r8, r2
 80002a2:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
 80002a4:	bd00      	pop	{pc}

080002a6 <Finalize>:
 80002a6:	b500      	push	{lr}
 80002a8:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
 80002aa:	4a18      	ldr	r2, [pc, #96]	; (800030c <loop+0x34>)
 80002ac:	4c12      	ldr	r4, [pc, #72]	; (80002f8 <loop+0x20>)
 80002ae:	7823      	ldrb	r3, [r4, #0]
 80002b0:	250f      	movs	r5, #15

080002b2 <Fin>:
 80002b2:	00ae      	lsls	r6, r5, #2
 80002b4:	270c      	movs	r7, #12
 80002b6:	403e      	ands	r6, r7
 80002b8:	08af      	lsrs	r7, r5, #2
 80002ba:	407e      	eors	r6, r7
 80002bc:	5d87      	ldrb	r7, [r0, r6]
 80002be:	405f      	eors	r7, r3
 80002c0:	2403      	movs	r4, #3
 80002c2:	4034      	ands	r4, r6
 80002c4:	5d14      	ldrb	r4, [r2, r4]
 80002c6:	4067      	eors	r7, r4
 80002c8:	554f      	strb	r7, [r1, r5]
 80002ca:	3d01      	subs	r5, #1
 80002cc:	daf1      	bge.n	80002b2 <Fin>
 80002ce:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
 80002d0:	bd00      	pop	{pc}

080002d2 <SafeCopy>:
 80002d2:	b500      	push	{lr}
 80002d4:	b47c      	push	{r2, r3, r4, r5, r6}
 80002d6:	2300      	movs	r3, #0

080002d8 <loop>:
 80002d8:	2200      	movs	r2, #0
 80002da:	009c      	lsls	r4, r3, #2
 80002dc:	510a      	str	r2, [r1, r4]
 80002de:	590a      	ldr	r2, [r1, r4]
 80002e0:	5902      	ldr	r2, [r0, r4]
 80002e2:	510a      	str	r2, [r1, r4]
 80002e4:	3301      	adds	r3, #1
 80002e6:	2b04      	cmp	r3, #4
 80002e8:	d1f6      	bne.n	80002d8 <loop>
 80002ea:	bc7c      	pop	{r2, r3, r4, r5, r6}
 80002ec:	bd00      	pop	{pc}
 80002ee:	0000      	.short	0x0000
 80002f0:	200003cc 	.word	0x200003cc
 80002f4:	200003ce 	.word	0x200003ce
 80002f8:	200003cd 	.word	0x200003cd
 80002fc:	2000010b 	.word	0x2000010b
 8000300:	20000000 	.word	0x20000000
 8000304:	2000030c 	.word	0x2000030c
 8000308:	2000020b 	.word	0x2000020b
 800030c:	200003c8 	.word	0x200003c8

08000310 <KeyExpansion>:
  return S[num];
}


void KeyExpansion(uint8_t* Key)
{
 8000310:	4b1b      	ldr	r3, [pc, #108]	; (8000380 <KeyExpansion+0x70>)
 8000312:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000314:	0001      	movs	r1, r0
 8000316:	001a      	movs	r2, r3
 8000318:	3110      	adds	r1, #16
  uint8_t tempa[4]; // Used for the column/row operations
  
  // The first round key is the key itself.
  for (i = 0; i < Nk; ++i)
  {
    RoundKey[(i * 4) + 0] = Key[(i * 4) + 0];
 800031a:	7804      	ldrb	r4, [r0, #0]
 800031c:	7014      	strb	r4, [r2, #0]
    RoundKey[(i * 4) + 1] = Key[(i * 4) + 1];
 800031e:	7844      	ldrb	r4, [r0, #1]
 8000320:	7054      	strb	r4, [r2, #1]
    RoundKey[(i * 4) + 2] = Key[(i * 4) + 2];
 8000322:	7884      	ldrb	r4, [r0, #2]
 8000324:	7094      	strb	r4, [r2, #2]
    RoundKey[(i * 4) + 3] = Key[(i * 4) + 3];
 8000326:	78c4      	ldrb	r4, [r0, #3]
 8000328:	3004      	adds	r0, #4
 800032a:	70d4      	strb	r4, [r2, #3]
 800032c:	3204      	adds	r2, #4
  for (i = 0; i < Nk; ++i)
 800032e:	4288      	cmp	r0, r1
 8000330:	d1f3      	bne.n	800031a <KeyExpansion+0xa>
        tempa[1] = getSBoxValue(tempa[1]);
        tempa[2] = getSBoxValue(tempa[2]);
        tempa[3] = getSBoxValue(tempa[3]);
      }

      tempa[0] =  tempa[0] ^ Rcon[i/Nk];
 8000332:	4a14      	ldr	r2, [pc, #80]	; (8000384 <KeyExpansion+0x74>)
 8000334:	2104      	movs	r1, #4
 8000336:	4694      	mov	ip, r2
  return S[num];
 8000338:	4e13      	ldr	r6, [pc, #76]	; (8000388 <KeyExpansion+0x78>)
    if (i % Nk == 0)
 800033a:	2703      	movs	r7, #3
      tempa[0]=RoundKey[(i-1) * 4 + 0];
 800033c:	7b1a      	ldrb	r2, [r3, #12]
      tempa[1]=RoundKey[(i-1) * 4 + 1];
 800033e:	7b5d      	ldrb	r5, [r3, #13]
      tempa[2]=RoundKey[(i-1) * 4 + 2];
 8000340:	7b9c      	ldrb	r4, [r3, #14]
      tempa[3]=RoundKey[(i-1) * 4 + 3];
 8000342:	7bd8      	ldrb	r0, [r3, #15]
    if (i % Nk == 0)
 8000344:	4239      	tst	r1, r7
 8000346:	d109      	bne.n	800035c <KeyExpansion+0x4c>
      tempa[0] =  tempa[0] ^ Rcon[i/Nk];
 8000348:	4667      	mov	r7, ip
  return S[num];
 800034a:	5d75      	ldrb	r5, [r6, r5]
 800034c:	9501      	str	r5, [sp, #4]
 800034e:	5d35      	ldrb	r5, [r6, r4]
 8000350:	5c34      	ldrb	r4, [r6, r0]
 8000352:	5cb0      	ldrb	r0, [r6, r2]
      tempa[0] =  tempa[0] ^ Rcon[i/Nk];
 8000354:	088a      	lsrs	r2, r1, #2
 8000356:	5cba      	ldrb	r2, [r7, r2]
 8000358:	9f01      	ldr	r7, [sp, #4]
 800035a:	407a      	eors	r2, r7
    }
    RoundKey[i * 4 + 0] = RoundKey[(i - Nk) * 4 + 0] ^ tempa[0];
 800035c:	781f      	ldrb	r7, [r3, #0]
  for (; i < Nb * (Nr + 1); ++i)
 800035e:	3101      	adds	r1, #1
    RoundKey[i * 4 + 0] = RoundKey[(i - Nk) * 4 + 0] ^ tempa[0];
 8000360:	407a      	eors	r2, r7
 8000362:	741a      	strb	r2, [r3, #16]
    RoundKey[i * 4 + 1] = RoundKey[(i - Nk) * 4 + 1] ^ tempa[1];
 8000364:	785a      	ldrb	r2, [r3, #1]
 8000366:	4055      	eors	r5, r2
    RoundKey[i * 4 + 2] = RoundKey[(i - Nk) * 4 + 2] ^ tempa[2];
 8000368:	789a      	ldrb	r2, [r3, #2]
    RoundKey[i * 4 + 1] = RoundKey[(i - Nk) * 4 + 1] ^ tempa[1];
 800036a:	745d      	strb	r5, [r3, #17]
    RoundKey[i * 4 + 2] = RoundKey[(i - Nk) * 4 + 2] ^ tempa[2];
 800036c:	4054      	eors	r4, r2
    RoundKey[i * 4 + 3] = RoundKey[(i - Nk) * 4 + 3] ^ tempa[3];
 800036e:	78da      	ldrb	r2, [r3, #3]
    RoundKey[i * 4 + 2] = RoundKey[(i - Nk) * 4 + 2] ^ tempa[2];
 8000370:	749c      	strb	r4, [r3, #18]
    RoundKey[i * 4 + 3] = RoundKey[(i - Nk) * 4 + 3] ^ tempa[3];
 8000372:	4050      	eors	r0, r2
 8000374:	74d8      	strb	r0, [r3, #19]
 8000376:	3304      	adds	r3, #4
  for (; i < Nb * (Nr + 1); ++i)
 8000378:	292c      	cmp	r1, #44	; 0x2c
 800037a:	d1de      	bne.n	800033a <KeyExpansion+0x2a>
  }
}
 800037c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800037e:	46c0      	nop			; (mov r8, r8)
 8000380:	20000318 	.word	0x20000318
 8000384:	20000100 	.word	0x20000100
 8000388:	2000010b 	.word	0x2000010b

0800038c <AES_encrypt>:
#include "MaskedAES_R1.h"

void AES_encrypt(uint8_t* m, uint8_t* c)
{
   uint8_t temp[16];
  for(int j=0;j<16;j++)
 800038c:	2300      	movs	r3, #0
{
 800038e:	b5f0      	push	{r4, r5, r6, r7, lr}
  {
    m[j]=0;
 8000390:	001a      	movs	r2, r3
{
 8000392:	0005      	movs	r5, r0
 8000394:	000c      	movs	r4, r1
 8000396:	b087      	sub	sp, #28
    temp[j]=0;
 8000398:	a902      	add	r1, sp, #8
    m[j]=0;
 800039a:	54ea      	strb	r2, [r5, r3]
    temp[j]=0;
 800039c:	545a      	strb	r2, [r3, r1]
  for(int j=0;j<16;j++)
 800039e:	3301      	adds	r3, #1
 80003a0:	2b10      	cmp	r3, #16
 80003a2:	d1f9      	bne.n	8000398 <AES_encrypt+0xc>
  }


  MaskingKey(RoundKey, temp);
 80003a4:	4f21      	ldr	r7, [pc, #132]	; (800042c <AES_encrypt+0xa0>)
  MADK(c,temp);



  starttrigger();
  for(int i=0;i<10;i++)
 80003a6:	2600      	movs	r6, #0
  MaskingKey(RoundKey, temp);
 80003a8:	0038      	movs	r0, r7
 80003aa:	f7ff fef1 	bl	8000190 <MaskingKey>
  MADK(c,temp);
 80003ae:	a902      	add	r1, sp, #8
 80003b0:	0020      	movs	r0, r4
 80003b2:	f7ff fefe 	bl	80001b2 <MADK>
  starttrigger();
 80003b6:	f000 f87d 	bl	80004b4 <starttrigger>
  {
        MSbox(c);
 80003ba:	0020      	movs	r0, r4
 80003bc:	f7ff ff05 	bl	80001ca <MSbox>

        MShiftRow(c);
 80003c0:	0020      	movs	r0, r4
 80003c2:	f7ff ff0e 	bl	80001e2 <MShiftRow>
 80003c6:	1c73      	adds	r3, r6, #1
 80003c8:	9301      	str	r3, [sp, #4]


        if(i!=9)
 80003ca:	2e09      	cmp	r6, #9
 80003cc:	d017      	beq.n	80003fe <AES_encrypt+0x72>
        {

           MMixColumn(c, m);
 80003ce:	0029      	movs	r1, r5
 80003d0:	0020      	movs	r0, r4
 80003d2:	f7ff ff16 	bl	8000202 <MMixColumn>

           MaskingKey(RoundKey+(i+1)*16, temp);
 80003d6:	1c73      	adds	r3, r6, #1
 80003d8:	0118      	lsls	r0, r3, #4
 80003da:	1838      	adds	r0, r7, r0
 80003dc:	a902      	add	r1, sp, #8
 80003de:	f7ff fed7 	bl	8000190 <MaskingKey>

           MADK(m,temp);
 80003e2:	a902      	add	r1, sp, #8
 80003e4:	0028      	movs	r0, r5
 80003e6:	f7ff fee4 	bl	80001b2 <MADK>

           SafeCopy(m,c);
 80003ea:	0021      	movs	r1, r4
 80003ec:	0028      	movs	r0, r5
 80003ee:	f7ff ff70 	bl	80002d2 <SafeCopy>
           if(i==0)
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d116      	bne.n	8000424 <AES_encrypt+0x98>
		endtrigger();
 80003f6:	f000 f866 	bl	80004c6 <endtrigger>
 80003fa:	9e01      	ldr	r6, [sp, #4]
 80003fc:	e7dd      	b.n	80003ba <AES_encrypt+0x2e>
        }
        else
        {
           MaskingKey(RoundKey+(i+1)*16, temp);
 80003fe:	0038      	movs	r0, r7
 8000400:	a902      	add	r1, sp, #8
 8000402:	30a0      	adds	r0, #160	; 0xa0
 8000404:	f7ff fec4 	bl	8000190 <MaskingKey>
           MADK(c,temp);
 8000408:	a902      	add	r1, sp, #8
 800040a:	0020      	movs	r0, r4
 800040c:	f7ff fed1 	bl	80001b2 <MADK>
           SafeCopy(c,m);
 8000410:	0029      	movs	r1, r5
 8000412:	0020      	movs	r0, r4
 8000414:	f7ff ff5d 	bl	80002d2 <SafeCopy>
        }

       
  }
  
  Finalize(m, c);
 8000418:	0021      	movs	r1, r4
 800041a:	0028      	movs	r0, r5
 800041c:	f7ff ff43 	bl	80002a6 <Finalize>
  
}
 8000420:	b007      	add	sp, #28
 8000422:	bdf0      	pop	{r4, r5, r6, r7, pc}
  for(int i=0;i<10;i++)
 8000424:	9e01      	ldr	r6, [sp, #4]
 8000426:	2e0a      	cmp	r6, #10
 8000428:	d1c7      	bne.n	80003ba <AES_encrypt+0x2e>
 800042a:	e7f5      	b.n	8000418 <AES_encrypt+0x8c>
 800042c:	20000318 	.word	0x20000318

08000430 <main>:

int main() {
 8000430:	b570      	push	{r4, r5, r6, lr}
  uint8_t key[ 16 ] = { 0x2B, 0x7E, 0x15, 0x16, 0x28, 0xAE, 0xD2, 0xA6,
                      0xAB, 0xF7, 0x15, 0x88, 0x09, 0xCF, 0x4F, 0x3C };
  //uint8_t key[ 16 ] = { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
  //                    0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 };
  // unsigned long j;
    U = 0;
 8000432:	2400      	movs	r4, #0
int main() {
 8000434:	b08c      	sub	sp, #48	; 0x30
  uint8_t key[ 16 ] = { 0x2B, 0x7E, 0x15, 0x16, 0x28, 0xAE, 0xD2, 0xA6,
 8000436:	2210      	movs	r2, #16
 8000438:	4919      	ldr	r1, [pc, #100]	; (80004a0 <main+0x70>)
 800043a:	a808      	add	r0, sp, #32
 800043c:	f000 f8a8 	bl	8000590 <memcpy>
    U = 0;
 8000440:	4e18      	ldr	r6, [pc, #96]	; (80004a4 <main+0x74>)
    V = 0;
 8000442:	4d19      	ldr	r5, [pc, #100]	; (80004a8 <main+0x78>)
    UV = 0;
 8000444:	4b19      	ldr	r3, [pc, #100]	; (80004ac <main+0x7c>)
    U = 0;
 8000446:	7034      	strb	r4, [r6, #0]
    V = 0;
 8000448:	702c      	strb	r4, [r5, #0]
    UV = 0;
 800044a:	701c      	strb	r4, [r3, #0]
   
    for( int i = 0; i < 16; i++ ) 
        readbyte(plain+i);
 800044c:	0020      	movs	r0, r4
    for( int i = 0; i < 16; i++ ) 
 800044e:	3401      	adds	r4, #1
        readbyte(plain+i);
 8000450:	4468      	add	r0, sp
 8000452:	f000 f841 	bl	80004d8 <readbyte>
    for( int i = 0; i < 16; i++ ) 
 8000456:	2c10      	cmp	r4, #16
 8000458:	d1f8      	bne.n	800044c <main+0x1c>
 
        randbyte(&U);
	randbyte(&V);
	 //V=(V&0x3)^((V&0x3)<<2)^((V&0x3)<<4)^((V&0x3)<<6);
         //SRMask=(target_uart_rd()<<24)|(target_uart_rd()<<16)|(target_uart_rd()<<8)|(target_uart_rd());
         SRMask=0;
 800045a:	2400      	movs	r4, #0
        randbyte(&U);
 800045c:	0030      	movs	r0, r6
 800045e:	f000 f84b 	bl	80004f8 <randbyte>
	randbyte(&V);
 8000462:	0028      	movs	r0, r5
 8000464:	f000 f848 	bl	80004f8 <randbyte>
         SRMask=0;
 8000468:	4b11      	ldr	r3, [pc, #68]	; (80004b0 <main+0x80>)
         KeyExpansion(key);
 800046a:	a808      	add	r0, sp, #32
         SRMask=0;
 800046c:	601c      	str	r4, [r3, #0]
         KeyExpansion(key);
 800046e:	f7ff ff4f 	bl	8000310 <KeyExpansion>
         GenMaskedSbox();
 8000472:	f7ff fe65 	bl	8000140 <GenMaskedSbox>
         MaskingPlaintext(plain, cipher);
 8000476:	a904      	add	r1, sp, #16
 8000478:	4668      	mov	r0, sp
 800047a:	f7ff fe76 	bl	800016a <MaskingPlaintext>
         AES_encrypt(plain, cipher);
 800047e:	a904      	add	r1, sp, #16
 8000480:	4668      	mov	r0, sp
 8000482:	f7ff ff83 	bl	800038c <AES_encrypt>
   for( int i = 0; i < 16; i++ ) 
        printbyte(cipher+i);
 8000486:	ab04      	add	r3, sp, #16
 8000488:	1918      	adds	r0, r3, r4
   for( int i = 0; i < 16; i++ ) 
 800048a:	3401      	adds	r4, #1
        printbyte(cipher+i);
 800048c:	f000 f84f 	bl	800052e <printbyte>
   for( int i = 0; i < 16; i++ ) 
 8000490:	2c10      	cmp	r4, #16
 8000492:	d1f8      	bne.n	8000486 <main+0x56>

  endprogram();
 8000494:	f000 f852 	bl	800053c <endprogram>
    return 0;
}
 8000498:	2000      	movs	r0, #0
 800049a:	b00c      	add	sp, #48	; 0x30
 800049c:	bd70      	pop	{r4, r5, r6, pc}
 800049e:	46c0      	nop			; (mov r8, r8)
 80004a0:	08000614 	.word	0x08000614
 80004a4:	200003cc 	.word	0x200003cc
 80004a8:	200003ce 	.word	0x200003ce
 80004ac:	200003cd 	.word	0x200003cd
 80004b0:	200003c8 	.word	0x200003c8

080004b4 <starttrigger>:
 80004b4:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
 80004b6:	24e0      	movs	r4, #224	; 0xe0
 80004b8:	0624      	lsls	r4, r4, #24
 80004ba:	2504      	movs	r5, #4
 80004bc:	406c      	eors	r4, r5
 80004be:	2501      	movs	r5, #1
 80004c0:	6025      	str	r5, [r4, #0]
 80004c2:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
 80004c4:	4770      	bx	lr

080004c6 <endtrigger>:
 80004c6:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
 80004c8:	24e0      	movs	r4, #224	; 0xe0
 80004ca:	0624      	lsls	r4, r4, #24
 80004cc:	2504      	movs	r5, #4
 80004ce:	406c      	eors	r4, r5
 80004d0:	2500      	movs	r5, #0
 80004d2:	6025      	str	r5, [r4, #0]
 80004d4:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
 80004d6:	4770      	bx	lr

080004d8 <readbyte>:
 80004d8:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
 80004da:	24e1      	movs	r4, #225	; 0xe1
 80004dc:	0624      	lsls	r4, r4, #24
 80004de:	6821      	ldr	r1, [r4, #0]
 80004e0:	7001      	strb	r1, [r0, #0]
 80004e2:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
 80004e4:	4770      	bx	lr

080004e6 <LoadN>:
 80004e6:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
 80004e8:	24e1      	movs	r4, #225	; 0xe1
 80004ea:	0624      	lsls	r4, r4, #24
 80004ec:	2510      	movs	r5, #16
 80004ee:	406c      	eors	r4, r5
 80004f0:	6821      	ldr	r1, [r4, #0]
 80004f2:	6001      	str	r1, [r0, #0]
 80004f4:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
 80004f6:	4770      	bx	lr

080004f8 <randbyte>:
 80004f8:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
 80004fa:	24e1      	movs	r4, #225	; 0xe1
 80004fc:	0624      	lsls	r4, r4, #24
 80004fe:	2504      	movs	r5, #4
 8000500:	406c      	eors	r4, r5
 8000502:	6821      	ldr	r1, [r4, #0]
 8000504:	7001      	strb	r1, [r0, #0]
 8000506:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
 8000508:	4770      	bx	lr

0800050a <getstart>:
 800050a:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
 800050c:	24e1      	movs	r4, #225	; 0xe1
 800050e:	0624      	lsls	r4, r4, #24
 8000510:	2508      	movs	r5, #8
 8000512:	406c      	eors	r4, r5
 8000514:	6821      	ldr	r1, [r4, #0]
 8000516:	6001      	str	r1, [r0, #0]
 8000518:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
 800051a:	4770      	bx	lr

0800051c <getruncount>:
 800051c:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
 800051e:	24e1      	movs	r4, #225	; 0xe1
 8000520:	0624      	lsls	r4, r4, #24
 8000522:	250c      	movs	r5, #12
 8000524:	406c      	eors	r4, r5
 8000526:	6821      	ldr	r1, [r4, #0]
 8000528:	6001      	str	r1, [r0, #0]
 800052a:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
 800052c:	4770      	bx	lr

0800052e <printbyte>:
 800052e:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
 8000530:	24e0      	movs	r4, #224	; 0xe0
 8000532:	0624      	lsls	r4, r4, #24
 8000534:	7805      	ldrb	r5, [r0, #0]
 8000536:	6025      	str	r5, [r4, #0]
 8000538:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
 800053a:	4770      	bx	lr

0800053c <endprogram>:
 800053c:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
 800053e:	24f0      	movs	r4, #240	; 0xf0
 8000540:	0624      	lsls	r4, r4, #24
 8000542:	2500      	movs	r5, #0
 8000544:	6025      	str	r5, [r4, #0]
 8000546:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
 8000548:	4770      	bx	lr

0800054a <initialisemaskflow>:
 800054a:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
 800054c:	24e0      	movs	r4, #224	; 0xe0
 800054e:	0624      	lsls	r4, r4, #24
 8000550:	2540      	movs	r5, #64	; 0x40
 8000552:	406c      	eors	r4, r5
 8000554:	6020      	str	r0, [r4, #0]
 8000556:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
 8000558:	4770      	bx	lr

0800055a <resetmaskflow>:
 800055a:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
 800055c:	24e0      	movs	r4, #224	; 0xe0
 800055e:	0624      	lsls	r4, r4, #24
 8000560:	2542      	movs	r5, #66	; 0x42
 8000562:	406c      	eors	r4, r5
 8000564:	2500      	movs	r5, #0
 8000566:	6025      	str	r5, [r4, #0]
 8000568:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
 800056a:	4770      	bx	lr

0800056c <setmaskflowstart>:
 800056c:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
 800056e:	24e0      	movs	r4, #224	; 0xe0
 8000570:	0624      	lsls	r4, r4, #24
 8000572:	2544      	movs	r5, #68	; 0x44
 8000574:	406c      	eors	r4, r5
 8000576:	6020      	str	r0, [r4, #0]
 8000578:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
 800057a:	4770      	bx	lr

0800057c <resetdatafile>:
 800057c:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
 800057e:	24e0      	movs	r4, #224	; 0xe0
 8000580:	0624      	lsls	r4, r4, #24
 8000582:	2546      	movs	r5, #70	; 0x46
 8000584:	406c      	eors	r4, r5
 8000586:	2500      	movs	r5, #0
 8000588:	6025      	str	r5, [r4, #0]
 800058a:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
 800058c:	4770      	bx	lr
	...

08000590 <memcpy>:
 8000590:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000592:	0005      	movs	r5, r0
 8000594:	2a0f      	cmp	r2, #15
 8000596:	d92f      	bls.n	80005f8 <memcpy+0x68>
 8000598:	000b      	movs	r3, r1
 800059a:	4303      	orrs	r3, r0
 800059c:	079b      	lsls	r3, r3, #30
 800059e:	d134      	bne.n	800060a <memcpy+0x7a>
 80005a0:	0016      	movs	r6, r2
 80005a2:	000c      	movs	r4, r1
 80005a4:	0003      	movs	r3, r0
 80005a6:	3e10      	subs	r6, #16
 80005a8:	0935      	lsrs	r5, r6, #4
 80005aa:	3501      	adds	r5, #1
 80005ac:	012d      	lsls	r5, r5, #4
 80005ae:	1945      	adds	r5, r0, r5
 80005b0:	6827      	ldr	r7, [r4, #0]
 80005b2:	601f      	str	r7, [r3, #0]
 80005b4:	6867      	ldr	r7, [r4, #4]
 80005b6:	605f      	str	r7, [r3, #4]
 80005b8:	68a7      	ldr	r7, [r4, #8]
 80005ba:	609f      	str	r7, [r3, #8]
 80005bc:	68e7      	ldr	r7, [r4, #12]
 80005be:	3410      	adds	r4, #16
 80005c0:	60df      	str	r7, [r3, #12]
 80005c2:	3310      	adds	r3, #16
 80005c4:	429d      	cmp	r5, r3
 80005c6:	d1f3      	bne.n	80005b0 <memcpy+0x20>
 80005c8:	230f      	movs	r3, #15
 80005ca:	439e      	bics	r6, r3
 80005cc:	3610      	adds	r6, #16
 80005ce:	1985      	adds	r5, r0, r6
 80005d0:	1989      	adds	r1, r1, r6
 80005d2:	4013      	ands	r3, r2
 80005d4:	2b03      	cmp	r3, #3
 80005d6:	d91a      	bls.n	800060e <memcpy+0x7e>
 80005d8:	1f1e      	subs	r6, r3, #4
 80005da:	2300      	movs	r3, #0
 80005dc:	08b4      	lsrs	r4, r6, #2
 80005de:	3401      	adds	r4, #1
 80005e0:	00a4      	lsls	r4, r4, #2
 80005e2:	58cf      	ldr	r7, [r1, r3]
 80005e4:	50ef      	str	r7, [r5, r3]
 80005e6:	3304      	adds	r3, #4
 80005e8:	42a3      	cmp	r3, r4
 80005ea:	d1fa      	bne.n	80005e2 <memcpy+0x52>
 80005ec:	2403      	movs	r4, #3
 80005ee:	43a6      	bics	r6, r4
 80005f0:	1d33      	adds	r3, r6, #4
 80005f2:	4022      	ands	r2, r4
 80005f4:	18c9      	adds	r1, r1, r3
 80005f6:	18ed      	adds	r5, r5, r3
 80005f8:	2a00      	cmp	r2, #0
 80005fa:	d005      	beq.n	8000608 <memcpy+0x78>
 80005fc:	2300      	movs	r3, #0
 80005fe:	5ccc      	ldrb	r4, [r1, r3]
 8000600:	54ec      	strb	r4, [r5, r3]
 8000602:	3301      	adds	r3, #1
 8000604:	4293      	cmp	r3, r2
 8000606:	d1fa      	bne.n	80005fe <memcpy+0x6e>
 8000608:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800060a:	0005      	movs	r5, r0
 800060c:	e7f6      	b.n	80005fc <memcpy+0x6c>
 800060e:	001a      	movs	r2, r3
 8000610:	e7f2      	b.n	80005f8 <memcpy+0x68>
 8000612:	46c0      	nop			; (mov r8, r8)
 8000614:	16157e2b 	.word	0x16157e2b
 8000618:	a6d2ae28 	.word	0xa6d2ae28
 800061c:	8815f7ab 	.word	0x8815f7ab
 8000620:	3c4fcf09 	.word	0x3c4fcf09
