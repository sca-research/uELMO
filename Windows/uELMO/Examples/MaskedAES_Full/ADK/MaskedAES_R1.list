
MaskedAES_R1.elf:     file format elf32-littlearm


Disassembly of section .text:

08000000 <vector_table>:
 8000000:	00 20 00 20 c5 00 00 08 c3 00 00 08 c1 00 00 08     . . ............
	...
 800002c:	c3 00 00 08 00 00 00 00 00 00 00 00 c3 00 00 08     ................
 800003c:	c3 00 00 08 c1 00 00 08 c1 00 00 08 c1 00 00 08     ................
 800004c:	c1 00 00 08 c1 00 00 08 c1 00 00 08 c1 00 00 08     ................
 800005c:	c1 00 00 08 c1 00 00 08 c1 00 00 08 c1 00 00 08     ................
 800006c:	c1 00 00 08 c1 00 00 08 c1 00 00 08 c1 00 00 08     ................
 800007c:	c1 00 00 08 c1 00 00 08 c1 00 00 08 c1 00 00 08     ................
 800008c:	c1 00 00 08 c1 00 00 08 c1 00 00 08 c1 00 00 08     ................
 800009c:	c1 00 00 08 c1 00 00 08 c1 00 00 08 c1 00 00 08     ................
 80000ac:	c1 00 00 08 c1 00 00 08 c1 00 00 08 c1 00 00 08     ................
 80000bc:	c1 00 00 08                                         ....

080000c0 <blocking_handler>:
 80000c0:	e7fe      	b.n	80000c0 <blocking_handler>

080000c2 <null_handler>:
 80000c2:	4770      	bx	lr

080000c4 <reset_handler>:
 80000c4:	2200      	movs	r2, #0
 80000c6:	4814      	ldr	r0, [pc, #80]	; (8000118 <reset_handler+0x54>)
 80000c8:	4b14      	ldr	r3, [pc, #80]	; (800011c <reset_handler+0x58>)
 80000ca:	4915      	ldr	r1, [pc, #84]	; (8000120 <reset_handler+0x5c>)
 80000cc:	1814      	adds	r4, r2, r0
 80000ce:	18d0      	adds	r0, r2, r3
 80000d0:	4288      	cmp	r0, r1
 80000d2:	d203      	bcs.n	80000dc <reset_handler+0x18>
 80000d4:	6824      	ldr	r4, [r4, #0]
 80000d6:	3204      	adds	r2, #4
 80000d8:	6004      	str	r4, [r0, #0]
 80000da:	e7f4      	b.n	80000c6 <reset_handler+0x2>
 80000dc:	4a11      	ldr	r2, [pc, #68]	; (8000124 <reset_handler+0x60>)
 80000de:	4290      	cmp	r0, r2
 80000e0:	d202      	bcs.n	80000e8 <reset_handler+0x24>
 80000e2:	2100      	movs	r1, #0
 80000e4:	c002      	stmia	r0!, {r1}
 80000e6:	e7f9      	b.n	80000dc <reset_handler+0x18>
 80000e8:	4c0f      	ldr	r4, [pc, #60]	; (8000128 <reset_handler+0x64>)
 80000ea:	4810      	ldr	r0, [pc, #64]	; (800012c <reset_handler+0x68>)
 80000ec:	4284      	cmp	r4, r0
 80000ee:	d202      	bcs.n	80000f6 <reset_handler+0x32>
 80000f0:	cc08      	ldmia	r4!, {r3}
 80000f2:	4798      	blx	r3
 80000f4:	e7f9      	b.n	80000ea <reset_handler+0x26>
 80000f6:	4c0e      	ldr	r4, [pc, #56]	; (8000130 <reset_handler+0x6c>)
 80000f8:	4b0e      	ldr	r3, [pc, #56]	; (8000134 <reset_handler+0x70>)
 80000fa:	429c      	cmp	r4, r3
 80000fc:	d202      	bcs.n	8000104 <reset_handler+0x40>
 80000fe:	cc01      	ldmia	r4!, {r0}
 8000100:	4780      	blx	r0
 8000102:	e7f9      	b.n	80000f8 <reset_handler+0x34>
 8000104:	f000 f9cc 	bl	80004a0 <main>
 8000108:	4c0b      	ldr	r4, [pc, #44]	; (8000138 <reset_handler+0x74>)
 800010a:	490c      	ldr	r1, [pc, #48]	; (800013c <reset_handler+0x78>)
 800010c:	428c      	cmp	r4, r1
 800010e:	d202      	bcs.n	8000116 <reset_handler+0x52>
 8000110:	cc04      	ldmia	r4!, {r2}
 8000112:	4790      	blx	r2
 8000114:	e7f9      	b.n	800010a <reset_handler+0x46>
 8000116:	46c0      	nop			; (mov r8, r8)
 8000118:	0800069c 	.word	0x0800069c
 800011c:	20000000 	.word	0x20000000
 8000120:	20000318 	.word	0x20000318
 8000124:	200003d0 	.word	0x200003d0
 8000128:	0800069c 	.word	0x0800069c
 800012c:	0800069c 	.word	0x0800069c
 8000130:	0800069c 	.word	0x0800069c
 8000134:	0800069c 	.word	0x0800069c
 8000138:	0800069c 	.word	0x0800069c
 800013c:	0800069c 	.word	0x0800069c

08000140 <GenMaskedSbox>:
 8000140:	b500      	push	{lr}
 8000142:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
 8000144:	48a1      	ldr	r0, [pc, #644]	; (80003cc <loop+0x28>)
 8000146:	7801      	ldrb	r1, [r0, #0]
 8000148:	48a1      	ldr	r0, [pc, #644]	; (80003d0 <loop+0x2c>)
 800014a:	7802      	ldrb	r2, [r0, #0]
 800014c:	48a1      	ldr	r0, [pc, #644]	; (80003d4 <loop+0x30>)
 800014e:	404a      	eors	r2, r1
 8000150:	7002      	strb	r2, [r0, #0]
 8000152:	23ff      	movs	r3, #255	; 0xff
 8000154:	4ca0      	ldr	r4, [pc, #640]	; (80003d8 <loop+0x34>)
 8000156:	4da1      	ldr	r5, [pc, #644]	; (80003dc <loop+0x38>)
 8000158:	48a1      	ldr	r0, [pc, #644]	; (80003e0 <loop+0x3c>)

0800015a <masksbox>:
 800015a:	4610      	mov	r0, r2
 800015c:	4058      	eors	r0, r3
 800015e:	5c26      	ldrb	r6, [r4, r0]
 8000160:	404e      	eors	r6, r1
 8000162:	2703      	movs	r7, #3
 8000164:	401f      	ands	r7, r3
 8000166:	489e      	ldr	r0, [pc, #632]	; (80003e0 <loop+0x3c>)
 8000168:	5dc7      	ldrb	r7, [r0, r7]
 800016a:	407e      	eors	r6, r7
 800016c:	54ee      	strb	r6, [r5, r3]
 800016e:	3b01      	subs	r3, #1
 8000170:	daf3      	bge.n	800015a <masksbox>
 8000172:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
 8000174:	bd00      	pop	{pc}

08000176 <MaskingPlaintext>:
 8000176:	b500      	push	{lr}
 8000178:	b4f0      	push	{r4, r5, r6, r7}
 800017a:	4b94      	ldr	r3, [pc, #592]	; (80003cc <loop+0x28>)
 800017c:	781b      	ldrb	r3, [r3, #0]
 800017e:	250f      	movs	r5, #15

08000180 <arrangedatamasked>:
 8000180:	00ae      	lsls	r6, r5, #2
 8000182:	270c      	movs	r7, #12
 8000184:	403e      	ands	r6, r7
 8000186:	08af      	lsrs	r7, r5, #2
 8000188:	407e      	eors	r6, r7
 800018a:	5d87      	ldrb	r7, [r0, r6]
 800018c:	405f      	eors	r7, r3
 800018e:	2403      	movs	r4, #3
 8000190:	402c      	ands	r4, r5
 8000192:	554f      	strb	r7, [r1, r5]
 8000194:	3d01      	subs	r5, #1
 8000196:	daf3      	bge.n	8000180 <arrangedatamasked>
 8000198:	bcf0      	pop	{r4, r5, r6, r7}
 800019a:	bd00      	pop	{pc}

0800019c <MaskingKey>:
 800019c:	b500      	push	{lr}
 800019e:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
 80001a0:	4b8b      	ldr	r3, [pc, #556]	; (80003d0 <loop+0x2c>)
 80001a2:	781a      	ldrb	r2, [r3, #0]
 80001a4:	250f      	movs	r5, #15

080001a6 <arrangedatakeymasked>:
 80001a6:	00ae      	lsls	r6, r5, #2
 80001a8:	270c      	movs	r7, #12
 80001aa:	403e      	ands	r6, r7
 80001ac:	08af      	lsrs	r7, r5, #2
 80001ae:	407e      	eors	r6, r7
 80001b0:	5d87      	ldrb	r7, [r0, r6]
 80001b2:	4057      	eors	r7, r2
 80001b4:	554f      	strb	r7, [r1, r5]
 80001b6:	3d01      	subs	r5, #1
 80001b8:	daf5      	bge.n	80001a6 <arrangedatakeymasked>
 80001ba:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
 80001bc:	bd00      	pop	{pc}

080001be <MADK>:
 80001be:	b500      	push	{lr}
 80001c0:	b4f0      	push	{r4, r5, r6, r7}
 80001c2:	22e0      	movs	r2, #224	; 0xe0
 80001c4:	0612      	lsls	r2, r2, #24
 80001c6:	3204      	adds	r2, #4
 80001c8:	2301      	movs	r3, #1
 80001ca:	6013      	str	r3, [r2, #0]
 80001cc:	2403      	movs	r4, #3

080001ce <ADK>:
 80001ce:	00a5      	lsls	r5, r4, #2
 80001d0:	5946      	ldr	r6, [r0, r5]
 80001d2:	594f      	ldr	r7, [r1, r5]
 80001d4:	4077      	eors	r7, r6
 80001d6:	5147      	str	r7, [r0, r5]
 80001d8:	3c01      	subs	r4, #1
 80001da:	daf8      	bge.n	80001ce <ADK>
 80001dc:	2300      	movs	r3, #0
 80001de:	6013      	str	r3, [r2, #0]
 80001e0:	bcf0      	pop	{r4, r5, r6, r7}
 80001e2:	bd00      	pop	{pc}

080001e4 <MSbox>:
 80001e4:	b500      	push	{lr}
 80001e6:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
 80001e8:	4a7d      	ldr	r2, [pc, #500]	; (80003e0 <loop+0x3c>)
 80001ea:	240f      	movs	r4, #15
 80001ec:	4d7b      	ldr	r5, [pc, #492]	; (80003dc <loop+0x38>)
 80001ee:	497a      	ldr	r1, [pc, #488]	; (80003d8 <loop+0x34>)

080001f0 <MS>:
 80001f0:	2600      	movs	r6, #0
 80001f2:	2700      	movs	r7, #0
 80001f4:	5d06      	ldrb	r6, [r0, r4]
 80001f6:	2703      	movs	r7, #3
 80001f8:	4027      	ands	r7, r4
 80001fa:	5dd7      	ldrb	r7, [r2, r7]
 80001fc:	407e      	eors	r6, r7
 80001fe:	5dab      	ldrb	r3, [r5, r6]
 8000200:	2703      	movs	r7, #3
 8000202:	4037      	ands	r7, r6
 8000204:	5dd7      	ldrb	r7, [r2, r7]
 8000206:	405f      	eors	r7, r3
 8000208:	08a6      	lsrs	r6, r4, #2
 800020a:	1ba6      	subs	r6, r4, r6
 800020c:	3604      	adds	r6, #4
 800020e:	2303      	movs	r3, #3
 8000210:	4033      	ands	r3, r6
 8000212:	5cd6      	ldrb	r6, [r2, r3]
 8000214:	4077      	eors	r7, r6
 8000216:	5504      	strb	r4, [r0, r4]
 8000218:	5507      	strb	r7, [r0, r4]
 800021a:	3c01      	subs	r4, #1
 800021c:	dae8      	bge.n	80001f0 <MS>
 800021e:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
 8000220:	bd00      	pop	{pc}

08000222 <MShiftRow>:
 8000222:	b500      	push	{lr}
 8000224:	b4f0      	push	{r4, r5, r6, r7}
 8000226:	4a6f      	ldr	r2, [pc, #444]	; (80003e4 <loop+0x40>)
 8000228:	6813      	ldr	r3, [r2, #0]
 800022a:	2100      	movs	r1, #0
 800022c:	2508      	movs	r5, #8
 800022e:	2610      	movs	r6, #16
 8000230:	2718      	movs	r7, #24
 8000232:	6804      	ldr	r4, [r0, #0]
 8000234:	2100      	movs	r1, #0
 8000236:	6001      	str	r1, [r0, #0]
 8000238:	6801      	ldr	r1, [r0, #0]
 800023a:	6004      	str	r4, [r0, #0]
 800023c:	6813      	ldr	r3, [r2, #0]
 800023e:	2400      	movs	r4, #0
 8000240:	6844      	ldr	r4, [r0, #4]
 8000242:	2100      	movs	r1, #0
 8000244:	41e9      	rors	r1, r5
 8000246:	6041      	str	r1, [r0, #4]
 8000248:	41ec      	rors	r4, r5
 800024a:	6841      	ldr	r1, [r0, #4]
 800024c:	6044      	str	r4, [r0, #4]
 800024e:	6813      	ldr	r3, [r2, #0]
 8000250:	2400      	movs	r4, #0
 8000252:	6884      	ldr	r4, [r0, #8]
 8000254:	2100      	movs	r1, #0
 8000256:	41f1      	rors	r1, r6
 8000258:	6081      	str	r1, [r0, #8]
 800025a:	41f4      	rors	r4, r6
 800025c:	6881      	ldr	r1, [r0, #8]
 800025e:	6084      	str	r4, [r0, #8]
 8000260:	6813      	ldr	r3, [r2, #0]
 8000262:	2400      	movs	r4, #0
 8000264:	68c4      	ldr	r4, [r0, #12]
 8000266:	2100      	movs	r1, #0
 8000268:	41f9      	rors	r1, r7
 800026a:	60c1      	str	r1, [r0, #12]
 800026c:	41fc      	rors	r4, r7
 800026e:	68c1      	ldr	r1, [r0, #12]
 8000270:	60c4      	str	r4, [r0, #12]
 8000272:	2100      	movs	r1, #0
 8000274:	2400      	movs	r4, #0
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	bd00      	pop	{pc}

0800027a <MMixColumn>:
 800027a:	b500      	push	{lr}
 800027c:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
 800027e:	2300      	movs	r3, #0
 8000280:	2400      	movs	r4, #0
 8000282:	2500      	movs	r5, #0
 8000284:	2600      	movs	r6, #0
 8000286:	2700      	movs	r7, #0
 8000288:	4642      	mov	r2, r8
 800028a:	b404      	push	{r2}
 800028c:	464a      	mov	r2, r9
 800028e:	b404      	push	{r2}
 8000290:	4652      	mov	r2, sl
 8000292:	b404      	push	{r2}
 8000294:	4681      	mov	r9, r0
 8000296:	4688      	mov	r8, r1
 8000298:	4f52      	ldr	r7, [pc, #328]	; (80003e4 <loop+0x40>)
 800029a:	4d51      	ldr	r5, [pc, #324]	; (80003e0 <loop+0x3c>)
 800029c:	4a52      	ldr	r2, [pc, #328]	; (80003e8 <loop+0x44>)
 800029e:	2600      	movs	r6, #0
 80002a0:	2300      	movs	r3, #0
 80002a2:	7829      	ldrb	r1, [r5, #0]
 80002a4:	5c54      	ldrb	r4, [r2, r1]
 80002a6:	4066      	eors	r6, r4
 80002a8:	404b      	eors	r3, r1
 80002aa:	0236      	lsls	r6, r6, #8
 80002ac:	021b      	lsls	r3, r3, #8
 80002ae:	7869      	ldrb	r1, [r5, #1]
 80002b0:	5c54      	ldrb	r4, [r2, r1]
 80002b2:	4066      	eors	r6, r4
 80002b4:	404b      	eors	r3, r1
 80002b6:	0236      	lsls	r6, r6, #8
 80002b8:	021b      	lsls	r3, r3, #8
 80002ba:	78a9      	ldrb	r1, [r5, #2]
 80002bc:	5c54      	ldrb	r4, [r2, r1]
 80002be:	4066      	eors	r6, r4
 80002c0:	404b      	eors	r3, r1
 80002c2:	0236      	lsls	r6, r6, #8
 80002c4:	021b      	lsls	r3, r3, #8
 80002c6:	78e9      	ldrb	r1, [r5, #3]
 80002c8:	5c54      	ldrb	r4, [r2, r1]
 80002ca:	4066      	eors	r6, r4
 80002cc:	404b      	eors	r3, r1
 80002ce:	2403      	movs	r4, #3

080002d0 <mix_columnmasked>:
 80002d0:	46a2      	mov	sl, r4
 80002d2:	4620      	mov	r0, r4
 80002d4:	464c      	mov	r4, r9
 80002d6:	0081      	lsls	r1, r0, #2
 80002d8:	5861      	ldr	r1, [r4, r1]
 80002da:	683d      	ldr	r5, [r7, #0]
 80002dc:	3001      	adds	r0, #1
 80002de:	2403      	movs	r4, #3
 80002e0:	4020      	ands	r0, r4
 80002e2:	464c      	mov	r4, r9
 80002e4:	0085      	lsls	r5, r0, #2
 80002e6:	5965      	ldr	r5, [r4, r5]
 80002e8:	4059      	eors	r1, r3
 80002ea:	4069      	eors	r1, r5
 80002ec:	09cc      	lsrs	r4, r1, #7
 80002ee:	683a      	ldr	r2, [r7, #0]
 80002f0:	4014      	ands	r4, r2
 80002f2:	68ba      	ldr	r2, [r7, #8]
 80002f4:	4354      	muls	r4, r2
 80002f6:	0049      	lsls	r1, r1, #1
 80002f8:	687a      	ldr	r2, [r7, #4]
 80002fa:	4011      	ands	r1, r2
 80002fc:	4061      	eors	r1, r4
 80002fe:	4069      	eors	r1, r5
 8000300:	3001      	adds	r0, #1
 8000302:	2403      	movs	r4, #3
 8000304:	4020      	ands	r0, r4
 8000306:	464c      	mov	r4, r9
 8000308:	683d      	ldr	r5, [r7, #0]
 800030a:	0085      	lsls	r5, r0, #2
 800030c:	5965      	ldr	r5, [r4, r5]
 800030e:	4069      	eors	r1, r5
 8000310:	3001      	adds	r0, #1
 8000312:	2403      	movs	r4, #3
 8000314:	4020      	ands	r0, r4
 8000316:	464c      	mov	r4, r9
 8000318:	683d      	ldr	r5, [r7, #0]
 800031a:	0085      	lsls	r5, r0, #2
 800031c:	5965      	ldr	r5, [r4, r5]
 800031e:	683a      	ldr	r2, [r7, #0]
 8000320:	4069      	eors	r1, r5
 8000322:	4655      	mov	r5, sl
 8000324:	00ad      	lsls	r5, r5, #2
 8000326:	4071      	eors	r1, r6
 8000328:	4640      	mov	r0, r8
 800032a:	5143      	str	r3, [r0, r5]
 800032c:	5141      	str	r1, [r0, r5]
 800032e:	683a      	ldr	r2, [r7, #0]
 8000330:	4654      	mov	r4, sl
 8000332:	3c01      	subs	r4, #1
 8000334:	dacc      	bge.n	80002d0 <mix_columnmasked>
 8000336:	bc04      	pop	{r2}
 8000338:	4692      	mov	sl, r2
 800033a:	bc04      	pop	{r2}
 800033c:	4691      	mov	r9, r2
 800033e:	bc04      	pop	{r2}
 8000340:	4690      	mov	r8, r2
 8000342:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
 8000344:	bd00      	pop	{pc}

08000346 <Finalize>:
 8000346:	b500      	push	{lr}
 8000348:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
 800034a:	4a25      	ldr	r2, [pc, #148]	; (80003e0 <loop+0x3c>)
 800034c:	4c21      	ldr	r4, [pc, #132]	; (80003d4 <loop+0x30>)
 800034e:	7823      	ldrb	r3, [r4, #0]
 8000350:	250f      	movs	r5, #15

08000352 <Fin>:
 8000352:	00ae      	lsls	r6, r5, #2
 8000354:	270c      	movs	r7, #12
 8000356:	403e      	ands	r6, r7
 8000358:	08af      	lsrs	r7, r5, #2
 800035a:	407e      	eors	r6, r7
 800035c:	5d87      	ldrb	r7, [r0, r6]
 800035e:	405f      	eors	r7, r3
 8000360:	2403      	movs	r4, #3
 8000362:	4034      	ands	r4, r6
 8000364:	5d14      	ldrb	r4, [r2, r4]
 8000366:	4067      	eors	r7, r4
 8000368:	554f      	strb	r7, [r1, r5]
 800036a:	3d01      	subs	r5, #1
 800036c:	daf1      	bge.n	8000352 <Fin>
 800036e:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
 8000370:	bd00      	pop	{pc}

08000372 <Trigger>:
 8000372:	b500      	push	{lr}
 8000374:	b470      	push	{r4, r5, r6}
 8000376:	2550      	movs	r5, #80	; 0x50
 8000378:	022d      	lsls	r5, r5, #8
 800037a:	3501      	adds	r5, #1
 800037c:	042d      	lsls	r5, r5, #16
 800037e:	263f      	movs	r6, #63	; 0x3f
 8000380:	0236      	lsls	r6, r6, #8
 8000382:	4075      	eors	r5, r6
 8000384:	26fc      	movs	r6, #252	; 0xfc
 8000386:	4075      	eors	r5, r6
 8000388:	2601      	movs	r6, #1
 800038a:	682c      	ldr	r4, [r5, #0]
 800038c:	4066      	eors	r6, r4
 800038e:	602e      	str	r6, [r5, #0]
 8000390:	46c0      	nop			; (mov r8, r8)
 8000392:	46c0      	nop			; (mov r8, r8)
 8000394:	46c0      	nop			; (mov r8, r8)
 8000396:	46c0      	nop			; (mov r8, r8)
 8000398:	602c      	str	r4, [r5, #0]
 800039a:	bc70      	pop	{r4, r5, r6}
 800039c:	bd00      	pop	{pc}

0800039e <SafeCopy>:
 800039e:	b500      	push	{lr}
 80003a0:	b47c      	push	{r2, r3, r4, r5, r6}
 80003a2:	2300      	movs	r3, #0

080003a4 <loop>:
 80003a4:	2200      	movs	r2, #0
 80003a6:	009c      	lsls	r4, r3, #2
 80003a8:	510a      	str	r2, [r1, r4]
 80003aa:	590a      	ldr	r2, [r1, r4]
 80003ac:	46c0      	nop			; (mov r8, r8)
 80003ae:	46c0      	nop			; (mov r8, r8)
 80003b0:	46c0      	nop			; (mov r8, r8)
 80003b2:	46c0      	nop			; (mov r8, r8)
 80003b4:	46c0      	nop			; (mov r8, r8)
 80003b6:	46c0      	nop			; (mov r8, r8)
 80003b8:	46c0      	nop			; (mov r8, r8)
 80003ba:	46c0      	nop			; (mov r8, r8)
 80003bc:	5902      	ldr	r2, [r0, r4]
 80003be:	510a      	str	r2, [r1, r4]
 80003c0:	3301      	adds	r3, #1
 80003c2:	2b04      	cmp	r3, #4
 80003c4:	d1ee      	bne.n	80003a4 <loop>
 80003c6:	bc7c      	pop	{r2, r3, r4, r5, r6}
 80003c8:	bd00      	pop	{pc}
 80003ca:	0000      	.short	0x0000
 80003cc:	200003cc 	.word	0x200003cc
 80003d0:	200003ce 	.word	0x200003ce
 80003d4:	200003cd 	.word	0x200003cd
 80003d8:	2000010b 	.word	0x2000010b
 80003dc:	20000000 	.word	0x20000000
 80003e0:	200003c8 	.word	0x200003c8
 80003e4:	2000030c 	.word	0x2000030c
 80003e8:	2000020b 	.word	0x2000020b

080003ec <KeyExpansion>:
  return S[num];
}


void KeyExpansion(uint8_t* Key)
{
 80003ec:	4b1b      	ldr	r3, [pc, #108]	; (800045c <KeyExpansion+0x70>)
 80003ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80003f0:	0001      	movs	r1, r0
 80003f2:	001a      	movs	r2, r3
 80003f4:	3110      	adds	r1, #16
  uint8_t tempa[4]; // Used for the column/row operations
  
  // The first round key is the key itself.
  for (i = 0; i < Nk; ++i)
  {
    RoundKey[(i * 4) + 0] = Key[(i * 4) + 0];
 80003f6:	7804      	ldrb	r4, [r0, #0]
 80003f8:	7014      	strb	r4, [r2, #0]
    RoundKey[(i * 4) + 1] = Key[(i * 4) + 1];
 80003fa:	7844      	ldrb	r4, [r0, #1]
 80003fc:	7054      	strb	r4, [r2, #1]
    RoundKey[(i * 4) + 2] = Key[(i * 4) + 2];
 80003fe:	7884      	ldrb	r4, [r0, #2]
 8000400:	7094      	strb	r4, [r2, #2]
    RoundKey[(i * 4) + 3] = Key[(i * 4) + 3];
 8000402:	78c4      	ldrb	r4, [r0, #3]
 8000404:	3004      	adds	r0, #4
 8000406:	70d4      	strb	r4, [r2, #3]
 8000408:	3204      	adds	r2, #4
  for (i = 0; i < Nk; ++i)
 800040a:	4288      	cmp	r0, r1
 800040c:	d1f3      	bne.n	80003f6 <KeyExpansion+0xa>
        tempa[1] = getSBoxValue(tempa[1]);
        tempa[2] = getSBoxValue(tempa[2]);
        tempa[3] = getSBoxValue(tempa[3]);
      }

      tempa[0] =  tempa[0] ^ Rcon[i/Nk];
 800040e:	4a14      	ldr	r2, [pc, #80]	; (8000460 <KeyExpansion+0x74>)
 8000410:	2104      	movs	r1, #4
 8000412:	4694      	mov	ip, r2
  return S[num];
 8000414:	4e13      	ldr	r6, [pc, #76]	; (8000464 <KeyExpansion+0x78>)
    if (i % Nk == 0)
 8000416:	2703      	movs	r7, #3
      tempa[0]=RoundKey[(i-1) * 4 + 0];
 8000418:	7b1a      	ldrb	r2, [r3, #12]
      tempa[1]=RoundKey[(i-1) * 4 + 1];
 800041a:	7b5d      	ldrb	r5, [r3, #13]
      tempa[2]=RoundKey[(i-1) * 4 + 2];
 800041c:	7b9c      	ldrb	r4, [r3, #14]
      tempa[3]=RoundKey[(i-1) * 4 + 3];
 800041e:	7bd8      	ldrb	r0, [r3, #15]
    if (i % Nk == 0)
 8000420:	4239      	tst	r1, r7
 8000422:	d109      	bne.n	8000438 <KeyExpansion+0x4c>
      tempa[0] =  tempa[0] ^ Rcon[i/Nk];
 8000424:	4667      	mov	r7, ip
  return S[num];
 8000426:	5d75      	ldrb	r5, [r6, r5]
 8000428:	9501      	str	r5, [sp, #4]
 800042a:	5d35      	ldrb	r5, [r6, r4]
 800042c:	5c34      	ldrb	r4, [r6, r0]
 800042e:	5cb0      	ldrb	r0, [r6, r2]
      tempa[0] =  tempa[0] ^ Rcon[i/Nk];
 8000430:	088a      	lsrs	r2, r1, #2
 8000432:	5cba      	ldrb	r2, [r7, r2]
 8000434:	9f01      	ldr	r7, [sp, #4]
 8000436:	407a      	eors	r2, r7
    }
    RoundKey[i * 4 + 0] = RoundKey[(i - Nk) * 4 + 0] ^ tempa[0];
 8000438:	781f      	ldrb	r7, [r3, #0]
  for (; i < Nb * (Nr + 1); ++i)
 800043a:	3101      	adds	r1, #1
    RoundKey[i * 4 + 0] = RoundKey[(i - Nk) * 4 + 0] ^ tempa[0];
 800043c:	407a      	eors	r2, r7
 800043e:	741a      	strb	r2, [r3, #16]
    RoundKey[i * 4 + 1] = RoundKey[(i - Nk) * 4 + 1] ^ tempa[1];
 8000440:	785a      	ldrb	r2, [r3, #1]
 8000442:	4055      	eors	r5, r2
    RoundKey[i * 4 + 2] = RoundKey[(i - Nk) * 4 + 2] ^ tempa[2];
 8000444:	789a      	ldrb	r2, [r3, #2]
    RoundKey[i * 4 + 1] = RoundKey[(i - Nk) * 4 + 1] ^ tempa[1];
 8000446:	745d      	strb	r5, [r3, #17]
    RoundKey[i * 4 + 2] = RoundKey[(i - Nk) * 4 + 2] ^ tempa[2];
 8000448:	4054      	eors	r4, r2
    RoundKey[i * 4 + 3] = RoundKey[(i - Nk) * 4 + 3] ^ tempa[3];
 800044a:	78da      	ldrb	r2, [r3, #3]
    RoundKey[i * 4 + 2] = RoundKey[(i - Nk) * 4 + 2] ^ tempa[2];
 800044c:	749c      	strb	r4, [r3, #18]
    RoundKey[i * 4 + 3] = RoundKey[(i - Nk) * 4 + 3] ^ tempa[3];
 800044e:	4050      	eors	r0, r2
 8000450:	74d8      	strb	r0, [r3, #19]
 8000452:	3304      	adds	r3, #4
  for (; i < Nb * (Nr + 1); ++i)
 8000454:	292c      	cmp	r1, #44	; 0x2c
 8000456:	d1de      	bne.n	8000416 <KeyExpansion+0x2a>
  }
}
 8000458:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800045a:	46c0      	nop			; (mov r8, r8)
 800045c:	20000318 	.word	0x20000318
 8000460:	20000100 	.word	0x20000100
 8000464:	2000010b 	.word	0x2000010b

08000468 <AES_encrypt>:


void AES_encrypt(uint8_t* m, uint8_t* c)
{
   uint8_t temp[16];
  for(int j=0;j<16;j++)
 8000468:	2300      	movs	r3, #0
{
 800046a:	b530      	push	{r4, r5, lr}
  {
    m[j]=0;
 800046c:	001a      	movs	r2, r3
{
 800046e:	0004      	movs	r4, r0
 8000470:	000d      	movs	r5, r1
 8000472:	b085      	sub	sp, #20
    temp[j]=0;
 8000474:	4669      	mov	r1, sp
    m[j]=0;
 8000476:	54e2      	strb	r2, [r4, r3]
    temp[j]=0;
 8000478:	545a      	strb	r2, [r3, r1]
  for(int j=0;j<16;j++)
 800047a:	3301      	adds	r3, #1
 800047c:	2b10      	cmp	r3, #16
 800047e:	d1f9      	bne.n	8000474 <AES_encrypt+0xc>
  }


  MaskingKey(RoundKey, temp);
 8000480:	4806      	ldr	r0, [pc, #24]	; (800049c <AES_encrypt+0x34>)
 8000482:	f7ff fe8b 	bl	800019c <MaskingKey>
  MADK(c,temp);
 8000486:	4669      	mov	r1, sp
 8000488:	0028      	movs	r0, r5
 800048a:	f7ff fe98 	bl	80001be <MADK>
        }

       
  }
*/
  Finalize(m, c);
 800048e:	0029      	movs	r1, r5
 8000490:	0020      	movs	r0, r4
 8000492:	f7ff ff58 	bl	8000346 <Finalize>
  
}
 8000496:	b005      	add	sp, #20
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	46c0      	nop			; (mov r8, r8)
 800049c:	20000318 	.word	0x20000318

080004a0 <main>:

int main() {
 80004a0:	b5f0      	push	{r4, r5, r6, r7, lr}
  //                    0xAB, 0xF7, 0x15, 0x88, 0x09, 0xCF, 0x4F, 0x3C };
  uint8_t key[ 16 ] = { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
                      0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 };
    long N=10000;
    long j;
    U = 0;
 80004a2:	2400      	movs	r4, #0
         for( int i = 0; i < 16; i++ ) 
	 {
             	randbyte(plain+i);
		//plain[i]=(plain[i]&0x3)^((plain[i]&0x3)<<2)^((plain[i]&0x3)<<4)^((plain[i]&0x3)<<6);
		if(j>N/2)
                    plain[i]=0;
 80004a4:	0027      	movs	r7, r4
int main() {
 80004a6:	b08d      	sub	sp, #52	; 0x34
  uint8_t key[ 16 ] = { 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
 80004a8:	2210      	movs	r2, #16
 80004aa:	2100      	movs	r1, #0
 80004ac:	a808      	add	r0, sp, #32
 80004ae:	f000 f8ab 	bl	8000608 <memset>
    U = 0;
 80004b2:	4b18      	ldr	r3, [pc, #96]	; (8000514 <main+0x74>)
    V = 0;
 80004b4:	4e18      	ldr	r6, [pc, #96]	; (8000518 <main+0x78>)
    U = 0;
 80004b6:	701c      	strb	r4, [r3, #0]
    UV = 0;
 80004b8:	4b18      	ldr	r3, [pc, #96]	; (800051c <main+0x7c>)
    V = 0;
 80004ba:	7034      	strb	r4, [r6, #0]
    UV = 0;
 80004bc:	701c      	strb	r4, [r3, #0]
int main() {
 80004be:	2500      	movs	r5, #0
             	randbyte(plain+i);
 80004c0:	0028      	movs	r0, r5
 80004c2:	4468      	add	r0, sp
 80004c4:	f000 f854 	bl	8000570 <randbyte>
		if(j>N/2)
 80004c8:	4b15      	ldr	r3, [pc, #84]	; (8000520 <main+0x80>)
 80004ca:	429c      	cmp	r4, r3
 80004cc:	dd01      	ble.n	80004d2 <main+0x32>
                    plain[i]=0;
 80004ce:	466b      	mov	r3, sp
 80004d0:	54ef      	strb	r7, [r5, r3]
         for( int i = 0; i < 16; i++ ) 
 80004d2:	3501      	adds	r5, #1
 80004d4:	2d10      	cmp	r5, #16
 80004d6:	d1f3      	bne.n	80004c0 <main+0x20>
         }
         randbyte(&U);
 80004d8:	480e      	ldr	r0, [pc, #56]	; (8000514 <main+0x74>)
 80004da:	f000 f849 	bl	8000570 <randbyte>
	 //U=(U&0x3)^((U&0x3)<<2)^((U&0x3)<<4)^((U&0x3)<<6);
	 randbyte(&V);
 80004de:	0030      	movs	r0, r6
 80004e0:	f000 f846 	bl	8000570 <randbyte>
	 //V=(V&0x3)^((V&0x3)<<2)^((V&0x3)<<4)^((V&0x3)<<6);
         //SRMask=(target_uart_rd()<<24)|(target_uart_rd()<<16)|(target_uart_rd()<<8)|(target_uart_rd());
         SRMask=0;
 80004e4:	4b0f      	ldr	r3, [pc, #60]	; (8000524 <main+0x84>)
         KeyExpansion(key);
 80004e6:	a808      	add	r0, sp, #32
         SRMask=0;
 80004e8:	601f      	str	r7, [r3, #0]
         KeyExpansion(key);
 80004ea:	f7ff ff7f 	bl	80003ec <KeyExpansion>
         GenMaskedSbox();
 80004ee:	f7ff fe27 	bl	8000140 <GenMaskedSbox>
         MaskingPlaintext(plain, cipher);
 80004f2:	a904      	add	r1, sp, #16
 80004f4:	4668      	mov	r0, sp
 80004f6:	f7ff fe3e 	bl	8000176 <MaskingPlaintext>
         AES_encrypt(plain, cipher);
 80004fa:	a904      	add	r1, sp, #16
 80004fc:	4668      	mov	r0, sp
 80004fe:	f7ff ffb3 	bl	8000468 <AES_encrypt>
    for(j=0;j<N;j++) 
 8000502:	4b09      	ldr	r3, [pc, #36]	; (8000528 <main+0x88>)
 8000504:	3401      	adds	r4, #1
 8000506:	429c      	cmp	r4, r3
 8000508:	d1d9      	bne.n	80004be <main+0x1e>
    	
    }

  endprogram();
 800050a:	f000 f853 	bl	80005b4 <endprogram>
    return 0;
}
 800050e:	2000      	movs	r0, #0
 8000510:	b00d      	add	sp, #52	; 0x34
 8000512:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000514:	200003cc 	.word	0x200003cc
 8000518:	200003ce 	.word	0x200003ce
 800051c:	200003cd 	.word	0x200003cd
 8000520:	00001388 	.word	0x00001388
 8000524:	200003c8 	.word	0x200003c8
 8000528:	00002710 	.word	0x00002710

0800052c <starttrigger>:
 800052c:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
 800052e:	24e0      	movs	r4, #224	; 0xe0
 8000530:	0624      	lsls	r4, r4, #24
 8000532:	2504      	movs	r5, #4
 8000534:	406c      	eors	r4, r5
 8000536:	2501      	movs	r5, #1
 8000538:	6025      	str	r5, [r4, #0]
 800053a:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
 800053c:	4770      	bx	lr

0800053e <endtrigger>:
 800053e:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
 8000540:	24e0      	movs	r4, #224	; 0xe0
 8000542:	0624      	lsls	r4, r4, #24
 8000544:	2504      	movs	r5, #4
 8000546:	406c      	eors	r4, r5
 8000548:	2500      	movs	r5, #0
 800054a:	6025      	str	r5, [r4, #0]
 800054c:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
 800054e:	4770      	bx	lr

08000550 <readbyte>:
 8000550:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
 8000552:	24e1      	movs	r4, #225	; 0xe1
 8000554:	0624      	lsls	r4, r4, #24
 8000556:	6821      	ldr	r1, [r4, #0]
 8000558:	7001      	strb	r1, [r0, #0]
 800055a:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
 800055c:	4770      	bx	lr

0800055e <LoadN>:
 800055e:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
 8000560:	24e1      	movs	r4, #225	; 0xe1
 8000562:	0624      	lsls	r4, r4, #24
 8000564:	2510      	movs	r5, #16
 8000566:	406c      	eors	r4, r5
 8000568:	6821      	ldr	r1, [r4, #0]
 800056a:	6001      	str	r1, [r0, #0]
 800056c:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
 800056e:	4770      	bx	lr

08000570 <randbyte>:
 8000570:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
 8000572:	24e1      	movs	r4, #225	; 0xe1
 8000574:	0624      	lsls	r4, r4, #24
 8000576:	2504      	movs	r5, #4
 8000578:	406c      	eors	r4, r5
 800057a:	6821      	ldr	r1, [r4, #0]
 800057c:	7001      	strb	r1, [r0, #0]
 800057e:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
 8000580:	4770      	bx	lr

08000582 <getstart>:
 8000582:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
 8000584:	24e1      	movs	r4, #225	; 0xe1
 8000586:	0624      	lsls	r4, r4, #24
 8000588:	2508      	movs	r5, #8
 800058a:	406c      	eors	r4, r5
 800058c:	6821      	ldr	r1, [r4, #0]
 800058e:	6001      	str	r1, [r0, #0]
 8000590:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
 8000592:	4770      	bx	lr

08000594 <getruncount>:
 8000594:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
 8000596:	24e1      	movs	r4, #225	; 0xe1
 8000598:	0624      	lsls	r4, r4, #24
 800059a:	250c      	movs	r5, #12
 800059c:	406c      	eors	r4, r5
 800059e:	6821      	ldr	r1, [r4, #0]
 80005a0:	6001      	str	r1, [r0, #0]
 80005a2:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
 80005a4:	4770      	bx	lr

080005a6 <printbyte>:
 80005a6:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
 80005a8:	24e0      	movs	r4, #224	; 0xe0
 80005aa:	0624      	lsls	r4, r4, #24
 80005ac:	7805      	ldrb	r5, [r0, #0]
 80005ae:	6025      	str	r5, [r4, #0]
 80005b0:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
 80005b2:	4770      	bx	lr

080005b4 <endprogram>:
 80005b4:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
 80005b6:	24f0      	movs	r4, #240	; 0xf0
 80005b8:	0624      	lsls	r4, r4, #24
 80005ba:	2500      	movs	r5, #0
 80005bc:	6025      	str	r5, [r4, #0]
 80005be:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
 80005c0:	4770      	bx	lr

080005c2 <initialisemaskflow>:
 80005c2:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
 80005c4:	24e0      	movs	r4, #224	; 0xe0
 80005c6:	0624      	lsls	r4, r4, #24
 80005c8:	2540      	movs	r5, #64	; 0x40
 80005ca:	406c      	eors	r4, r5
 80005cc:	6020      	str	r0, [r4, #0]
 80005ce:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
 80005d0:	4770      	bx	lr

080005d2 <resetmaskflow>:
 80005d2:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
 80005d4:	24e0      	movs	r4, #224	; 0xe0
 80005d6:	0624      	lsls	r4, r4, #24
 80005d8:	2542      	movs	r5, #66	; 0x42
 80005da:	406c      	eors	r4, r5
 80005dc:	2500      	movs	r5, #0
 80005de:	6025      	str	r5, [r4, #0]
 80005e0:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
 80005e2:	4770      	bx	lr

080005e4 <setmaskflowstart>:
 80005e4:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
 80005e6:	24e0      	movs	r4, #224	; 0xe0
 80005e8:	0624      	lsls	r4, r4, #24
 80005ea:	2544      	movs	r5, #68	; 0x44
 80005ec:	406c      	eors	r4, r5
 80005ee:	6020      	str	r0, [r4, #0]
 80005f0:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
 80005f2:	4770      	bx	lr

080005f4 <resetdatafile>:
 80005f4:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
 80005f6:	24e0      	movs	r4, #224	; 0xe0
 80005f8:	0624      	lsls	r4, r4, #24
 80005fa:	2546      	movs	r5, #70	; 0x46
 80005fc:	406c      	eors	r4, r5
 80005fe:	2500      	movs	r5, #0
 8000600:	6025      	str	r5, [r4, #0]
 8000602:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
 8000604:	4770      	bx	lr
	...

08000608 <memset>:
 8000608:	b5f0      	push	{r4, r5, r6, r7, lr}
 800060a:	0783      	lsls	r3, r0, #30
 800060c:	d043      	beq.n	8000696 <memset+0x8e>
 800060e:	1e54      	subs	r4, r2, #1
 8000610:	2a00      	cmp	r2, #0
 8000612:	d03f      	beq.n	8000694 <memset+0x8c>
 8000614:	b2ce      	uxtb	r6, r1
 8000616:	0002      	movs	r2, r0
 8000618:	2503      	movs	r5, #3
 800061a:	e002      	b.n	8000622 <memset+0x1a>
 800061c:	001a      	movs	r2, r3
 800061e:	3c01      	subs	r4, #1
 8000620:	d338      	bcc.n	8000694 <memset+0x8c>
 8000622:	1c53      	adds	r3, r2, #1
 8000624:	7016      	strb	r6, [r2, #0]
 8000626:	422b      	tst	r3, r5
 8000628:	d1f8      	bne.n	800061c <memset+0x14>
 800062a:	2c03      	cmp	r4, #3
 800062c:	d92a      	bls.n	8000684 <memset+0x7c>
 800062e:	22ff      	movs	r2, #255	; 0xff
 8000630:	400a      	ands	r2, r1
 8000632:	0215      	lsls	r5, r2, #8
 8000634:	4315      	orrs	r5, r2
 8000636:	042a      	lsls	r2, r5, #16
 8000638:	4315      	orrs	r5, r2
 800063a:	2c0f      	cmp	r4, #15
 800063c:	d914      	bls.n	8000668 <memset+0x60>
 800063e:	0027      	movs	r7, r4
 8000640:	001a      	movs	r2, r3
 8000642:	3f10      	subs	r7, #16
 8000644:	093e      	lsrs	r6, r7, #4
 8000646:	3601      	adds	r6, #1
 8000648:	0136      	lsls	r6, r6, #4
 800064a:	199e      	adds	r6, r3, r6
 800064c:	6015      	str	r5, [r2, #0]
 800064e:	6055      	str	r5, [r2, #4]
 8000650:	6095      	str	r5, [r2, #8]
 8000652:	60d5      	str	r5, [r2, #12]
 8000654:	3210      	adds	r2, #16
 8000656:	4296      	cmp	r6, r2
 8000658:	d1f8      	bne.n	800064c <memset+0x44>
 800065a:	220f      	movs	r2, #15
 800065c:	4397      	bics	r7, r2
 800065e:	3710      	adds	r7, #16
 8000660:	19db      	adds	r3, r3, r7
 8000662:	4014      	ands	r4, r2
 8000664:	2c03      	cmp	r4, #3
 8000666:	d90d      	bls.n	8000684 <memset+0x7c>
 8000668:	001a      	movs	r2, r3
 800066a:	1f27      	subs	r7, r4, #4
 800066c:	08be      	lsrs	r6, r7, #2
 800066e:	3601      	adds	r6, #1
 8000670:	00b6      	lsls	r6, r6, #2
 8000672:	199e      	adds	r6, r3, r6
 8000674:	c220      	stmia	r2!, {r5}
 8000676:	42b2      	cmp	r2, r6
 8000678:	d1fc      	bne.n	8000674 <memset+0x6c>
 800067a:	2203      	movs	r2, #3
 800067c:	4397      	bics	r7, r2
 800067e:	3704      	adds	r7, #4
 8000680:	19db      	adds	r3, r3, r7
 8000682:	4014      	ands	r4, r2
 8000684:	2c00      	cmp	r4, #0
 8000686:	d005      	beq.n	8000694 <memset+0x8c>
 8000688:	b2c9      	uxtb	r1, r1
 800068a:	191c      	adds	r4, r3, r4
 800068c:	7019      	strb	r1, [r3, #0]
 800068e:	3301      	adds	r3, #1
 8000690:	429c      	cmp	r4, r3
 8000692:	d1fb      	bne.n	800068c <memset+0x84>
 8000694:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000696:	0014      	movs	r4, r2
 8000698:	0003      	movs	r3, r0
 800069a:	e7c6      	b.n	800062a <memset+0x22>
